{"version":3,"sources":["Form.js","Weather.js","App.js","index.js"],"names":["CityStateForm","state","city","name","temp","tfeel","wicon","handleClick","a","cityName","document","getElementById","value","stateName","States","sanitizeStateName","stateAbbr","getStateCodeByStateName","query","url","domain","iconSrc","fetch","then","data","json","fetchedData","cod","alert","message","setState","main","feels_like","weather","icon","props","addLocation","p","Group","htmlFor","Input","type","id","placeholder","primary","preventDefault","onClick","this","Component","Weather","locationData","length","removeLocation","mt","bg","rounded","Locations","index","locations","map","location","col","text","key","className","Image","src","secondary","mx","pb","justifyContent","App","aLocation","updatedLocations","filter","indexOf","mb","Form","ReactDOM","render"],"mappings":"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","file":"static/js/main.cedcab25.chunk.js","sourcesContent":["// This file describes the Form react component that renders a form.\n// Then, based on the user's input, it fetches data from the openweathermap api\n// and calls a function from the App component to update the locations array\n// with weather and location data\n\nimport React, { Component } from \"react\";\nimport States from \"us-state-codes\";\nimport { Form, Button } from \"bootstrap-4-react\";\n\n// Defines the structure of one location data\nclass CityStateForm extends Component {\n  state = {\n    city: {\n      name: \"\",\n      state: \"\",\n      temp: 0,\n      tfeel: 0,\n      wicon: \"\"\n    }\n  };\n\n  // When a user submits answers to input text boxes, the function\n  // fetches the nesessary data from the openweathermap and updates\n  // the locations array from App\n  handleClick = async () => {\n    const cityName = document.getElementById(\"cityName\").value;\n    let stateName = document.getElementById(\"stateName\").value;\n    stateName = States.sanitizeStateName(stateName);\n    const stateAbbr = States.getStateCodeByStateName(stateName);\n    const domain = \"https://api.openweathermap.org/\";\n    const route = \"data/2.5/weather/?q=\";\n    const query = `${cityName},${stateAbbr},us&appid=011216192ce543ec5ba1b7afed585afa`;\n    const config = \"&units=imperial\";\n    const url = domain + route + query + config;\n    let iconSrc = \"https://openweathermap.org/img/wn/\";\n    \n    // Data is waited for until it is fetched\n    const fetchedData = await fetch(url)\n      .then(data => {\n        return data.json();\n      })\n    \n    // If server sends an error code, it is handled so that\n    // the app does not crush\n    if (fetchedData.cod === \"404\") {\n      alert(\"Error: \" + fetchedData.message);\n      document.getElementById(\"stateName\").value = \"\";\n      document.getElementById(\"cityName\").value = \"\";\n      return null;\n    }\n\n    // Updates the local state object to be sent over to\n    // the App component for locations array update\n    this.setState({\n      city: {\n        name: fetchedData.name,\n        state: stateAbbr,\n        temp: fetchedData.main.temp,\n        tfeel: fetchedData.main.feels_like,\n        wicon: iconSrc + fetchedData.weather[0].icon + \"@2x.png\"\n      }\n    });\n\n    // Location is sent to be added to the App's locations array\n    // and the form fields are reset\n    this.props.addLocation(this.state);\n    document.getElementById(\"stateName\").value = \"\";\n    document.getElementById(\"cityName\").value = \"\";\n  };\n\n  // Renders the form structure\n  render() {\n    return (\n      <Form p=\"4\">\n        <Form.Group>\n          <label htmlFor=\"cityName\">City Name</label>\n          <Form.Input type=\"text\" id=\"cityName\" placeholder=\"Enter city name\" />\n        </Form.Group>\n        <Form.Group>\n          <label htmlFor=\"stateName\">State</label>\n          <Form.Input type=\"text\" id=\"stateName\" placeholder=\"Enter state name\" />\n        </Form.Group>\n        <Button primary preventDefault onClick={this.handleClick}>Submit</Button>\n      </Form>\n    );\n  }\n}\n\nexport default CityStateForm;","// This file defines two react components that work together to\n// structure the looks of the weather cards and their container\n\nimport React, { Component } from \"react\";\nimport { Container, Figure, Col, Row, Button } from \"bootstrap-4-react\";\nimport \"../src/css/weather.css\";\n\n// Renders all the weather data for given locations\nclass Weather extends Component {\n  render() {\n\n    // Prevents display of a container for location cards\n    if (this.props.locationData.length === 0) {\n      return null;\n    }\n\n    // Renders all the weather cards in a container\n    const { locationData, removeLocation } = this.props;\n    return (\n      <Container mt=\"3\" bg=\"light\" rounded>\n        <Locations locationData={locationData} removeLocation={removeLocation} />\n      </Container>\n    );\n  }\n}\n\n// Supplies all the weather locations to be displayed\nclass Locations extends Component {\n\n  // Calls the App's function to remove the specified weather card\n  handleClick = index => {\n    this.props.removeLocation(index);\n  };\n\n  render() {\n\n    // Prevents further work if weather data is not supplied\n    if (!this.props) {\n      return null;\n    }\n\n    // Maps every location data to a react component to be displayed\n    const locations = this.props.locationData.map((location, index) => {\n      return (\n        <Col col=\"2\" mt=\"4\" text=\"center\" key={index}>\n          <div key={index}>\n            <p className=\"font-weight-bold\">\n              {location.city.name}, {location.city.state}{\" \"}\n            </p>\n            <Figure>\n              <Figure.Image src={location.city.wicon} />\n            </Figure>\n            <br />\n            Temp: {location.city.temp}\n            <br />\n            Feels: {location.city.tfeel}\n          </div>\n          <Button secondary preventDefault text=\"center\" onClick={() => this.handleClick(index)}>Remove</Button>\n        </Col>\n      );\n    });\n    \n    // Returns the mapped react components to be displayed\n    return (\n      <Row mx=\"4\" pb=\"4\" justifyContent=\"between\">{locations}</Row>\n    );\n  }\n}\n\nexport default Weather;","// The file describes the main app component. It contains the data\n// array that is used to display data in other components and handles\n// operations such as add and remove for interactivity\n\nimport React, { Component } from \"react\";\nimport { Container } from \"bootstrap-4-react\";\nimport Form from \"./Form\";\nimport Weather from \"./Weather\";\nimport \"./weather.css\";\n\nclass App extends Component {\n\n  // Provides storage for locations with weather information\n  state = {\n    locations: []\n  }\n\n  // Adds a location to the group of locations\n  addLocation = aLocation => {\n    this.setState({ locations: [...this.state.locations, aLocation] });\n  }\n\n  // Removes a location from the group of locations\n  removeLocation = aLocation => {\n    const { locations } = this.state;\n    const updatedLocations = locations.filter(\n      location => locations.indexOf(location) !== aLocation);\n    this.setState({locations: updatedLocations});\n  }\n \n  // Renders components of the app\n  render() {\n    return (\n      <Container p=\"4\">\n        <Container p=\"4\" bg=\"light\" rounded mb=\"3\">\n          <h2>Weat<span id=\"logoComp\">Comp</span></h2>\n        </Container>\n        <Container bg=\"light\" rounded>\n          <Form addLocation={this.addLocation}/>\n        </Container>\n        <Weather locationData={this.state.locations} removeLocation={this.removeLocation}/>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// The file describes code that imports various components\n// to start the app then ReactDOM renders the main component,\n// App to start the application\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}